/*
 * Copyright (C) 2014 Vlad Mihalachi
 *
 * This file is part of Turbo Editor.
 *
 * Turbo Editor is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Turbo Editor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import java.util.regex.Pattern

buildscript {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/repo' }
}



android {
    compileSdkVersion 29
    buildToolsVersion '29.0.2'
    defaultConfig {
        applicationId "com.manichord.viperedit"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 5
        versionName "1.1.2"
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    signingConfigs {
        release {
            // Properties localProps = new Properties()
            // localProps.load(new FileInputStream(file('../local.properties')))
            // Properties keyProps = new Properties()
            // assert localProps['keystore.props.file']
            // keyProps.load(new FileInputStream(file(localProps['keystore.props.file'])))
            // storeFile file(keyProps["storeFile"])
            // keyAlias keyProps["alias"]
            // storePassword keyProps["storePass"]
            // keyPassword keyProps["pass"]
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
    implementation "androidx.core:core-ktx:1.1.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    api 'androidx.appcompat:appcompat:1.1.0'
    api 'com.github.mukeshsolanki:MarkdownView-Android:1.0.8'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'commons-io:commons-io:2.6'
    implementation 'com.github.gabrielemariotti.changeloglib:changelog:2.1.0'
    implementation 'com.github.albfernandez:juniversalchardet:2.3.0'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.2'

    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    implementation 'io.sentry:sentry-android:1.7.30'

// this dependency is not required if you are already using your own
// slf4j implementation
    implementation 'org.slf4j:slf4j-nop:1.7.25'

    testImplementation 'junit:junit:4.12'
    implementation 'androidx.fragment:fragment-ktx:1.1.0'
}

task incrementVersionCode {
    doLast {
        println(":incrementVersionCode - Incrementing Version Code...")
        def buildGradleFile = file("build.gradle")
        def patternVersionCode = Pattern.compile("versionCode (\\d+)")
        def buildGradleFileText = buildGradleFile.getText()
        def matcherVersionCode = patternVersionCode.matcher(buildGradleFileText)
        matcherVersionCode.find()
        def mVersionCode = Integer.parseInt(matcherVersionCode.group(1))
        def mNextVersionCode = mVersionCode + 1
        def manifestContent = matcherVersionCode.replaceAll("versionCode " + mNextVersionCode)
        println(":incrementVersionCode - current versionCode=" + mVersionCode);
        println(":incrementVersionCode - next versionCode=" + mNextVersionCode);
        buildGradleFile.write(manifestContent)
    }
}
